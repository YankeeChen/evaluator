#########################################
# DeVISow Configuration
# Version: 1.1
#########################################


#################################
# DEVISOR SERVER SETTINGS

# Port at which DeVISor should listen to JSON-RPC requests
devisor.port = 8999

# The maximum length of the aggregated content in bytes for HTTP messages
http.content.size.max = 10485760



#################################
# SPARQL 1.1 PROTOCOL-COMPLIANT TRIPLE STORE SETTINGS

# Triple store host
triple.store.host = http://localhost:3030/

# Dataset name
triple.store.dataset = ds



#################################
# DEBUGGING OPTIONS
# Choose what information should be shown in the DEBUG log. 
# For this to work, the logging threshold of the log4j console adapter must be set to at least DEBUG.  
# Warning: These debugging operations require additional processing.

# Set to true if SPARQL queries and updates sent to DeVISor should be logged 
print.sparql = false

# Set to true to time API operations (query, update, initialize, etc.)
time.api.operations = true

# Set to true to time atomic operations (inserting facts, running inference, etc.)
# Useful for more fine-grained debugging
time.atomic.operations = false

# Set to true to count all facts in the triple store before and after every SPARQL Update operation
count.facts = true

# Set to true to save triple store and inferred facts snapshots in temporary files
make.file.snapshots = true



#################################
# TRIPLE STORE INFERENCE OPTIONS (ADVANCED)
# These options affect what kind of triples should be passed from the triple store to the inference engine for reasoning

# [BLANK ?p ?o]
triple.store.skip.blank.subjects = true

# [?s BLANK ?o]
triple.store.skip.blank.predicates = true

# [?s ?p BLANK]
triple.store.skip.blank.objects = true



#################################
# BASEVISOR INFERENCE OPTIONS (ADVANCED)
# These options affect what kind of triples, inferred by BaseVISor, will be put in the triple store.

# [BLANK ?p ?o]  
reasoner.skip.blank.subjects = true

# [?s BLANK ?o]  
reasoner.skip.blank.predicates = true

# [?s ?p BLANK]  
reasoner.skip.blank.objects = true

# [owl:Nothing ?p ?o]
reasoner.skip.nothing.subjects = true

# [?s rdf:type owl:Thing]
reasoner.skip.type.thing = true

# [?s rdf:type owl:Class]
reasoner.skip.type.class = true

# [?s rdfs:subClassOf owl:Thing]
reasoner.skip.subclass.thing = true

# [?s owl:sameAs ?s]
reasoner.skip.reflective.sameAs = true

# [?s rdfs:subClassOf ?s]
reasoner.skip.reflective.subClassOf = true

# [?s owl:equivalentClass ?s]
reasoner.skip.reflective.equivalentClass = true

# [?s owl:equivalentProperty ?s]
reasoner.skip.reflective.equivalentProperty = true

# [?s rdfs:subPropertyOf ?s]
reasoner.skip.reflective.subPropertyOf = true

# [PRIMITIVE ?p ?o]
# Plain literals, numeric values, strings and date/times primitives are represented as blank nodes in BaseVISor.
# A triple store will not connect the primitives with these blanks in a roundtrip exchange of facts.
# Set to true to avoid primitives as subjects (facts about primitives) in the inferred facts returned by BaseVISor. 
reasoner.skip.primitive.subjects = true

# Insert triples used internally by BaseVISor to represent such constructs as class restrictions or property chains
# These triples use predicates that begin with '#_'
reasoner.skip.internal.triples = true


